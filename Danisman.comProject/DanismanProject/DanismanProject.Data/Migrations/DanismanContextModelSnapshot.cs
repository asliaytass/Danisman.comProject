// <auto-generated />
using System;
using DanismanProject.Data.Concrete.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DanismanProject.Data.Migrations
{
    [DbContext(typeof(DanismanContext))]
    partial class DanismanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.16");

            modelBuilder.Entity("DanismanProject.Entity.Advisor", b =>
                {
                    b.Property<int>("AdvisorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdvisorNameSurname")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuitable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuccessRate")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdvisorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("JobId");

                    b.ToTable("Advisors");
                });

            modelBuilder.Entity("DanismanProject.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryImg")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DanismanProject.Entity.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentImg")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentText")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("DanismanProject.Entity.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobImg")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("JobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("DanismanProject.Entity.Subcategory", b =>
                {
                    b.Property<int>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubcategoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("SubcategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("DanismanProject.Entity.SubcategoryAdvisor", b =>
                {
                    b.Property<int>("AdvisorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdvisorId", "SubcategoryId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("SubcategoryAdvisors");
                });

            modelBuilder.Entity("DanismanProject.Entity.Advisor", b =>
                {
                    b.HasOne("DanismanProject.Entity.Category", "Category")
                        .WithMany("Advisors")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanismanProject.Entity.Job", "Job")
                        .WithMany("Advisors")
                        .HasForeignKey("JobId");

                    b.Navigation("Category");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("DanismanProject.Entity.Content", b =>
                {
                    b.HasOne("DanismanProject.Entity.Category", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DanismanProject.Entity.Subcategory", b =>
                {
                    b.HasOne("DanismanProject.Entity.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DanismanProject.Entity.SubcategoryAdvisor", b =>
                {
                    b.HasOne("DanismanProject.Entity.Advisor", "Advisor")
                        .WithMany("SubcategoryAdvisors")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DanismanProject.Entity.Subcategory", "Subcategory")
                        .WithMany("SubcategoryAdvisors")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("DanismanProject.Entity.Advisor", b =>
                {
                    b.Navigation("SubcategoryAdvisors");
                });

            modelBuilder.Entity("DanismanProject.Entity.Category", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("Contents");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("DanismanProject.Entity.Job", b =>
                {
                    b.Navigation("Advisors");
                });

            modelBuilder.Entity("DanismanProject.Entity.Subcategory", b =>
                {
                    b.Navigation("SubcategoryAdvisors");
                });
#pragma warning restore 612, 618
        }
    }
}
